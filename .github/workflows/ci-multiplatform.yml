name: CI (Multiplatform)

# This workflow adds macOS (SwiftPM), iOS Simulator, and watchOS Simulator coverage.
# It is disabled by default and can be run manually. Integrate into your main
# CI once it’s stable by adding push/pull_request triggers as needed.

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  SWIFT_VERSION: '6.1.0'
  CI: 'true'

jobs:
  macos-spm:
    name: macOS • SwiftPM (Debug + Release)
    runs-on: macos-14
    timeout-minutes: 25
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Swift
        uses: swift-actions/setup-swift@v2
        with:
          swift-version: ${{ env.SWIFT_VERSION }}

      - name: Install GNU timeout
        run: brew install coreutils

      - name: Setup SPM Cache
        uses: ./.github/actions/setup-spm-cache
        with:
          cache-key-prefix: 'multiplatform'
          swift-version: ${{ env.SWIFT_VERSION }}

      - name: Cache SwiftPM
        uses: actions/cache@v4
        with:
          path: .build
          key: spm-${{ runner.os }}-${{ hashFiles('Package.resolved') }}

      - name: Build (Debug)
        run: swift build -c debug

      - name: Test (Debug + Coverage)
        run: |
          echo "Starting test execution at $(date)"
          echo "Building tests..."
          swift build --build-tests

          # Create directory for profdata files
          mkdir -p .build/debug/codecov

          # Run each test target individually to prevent one hung test from blocking all tests
          set +e  # Don't exit on test failure

          TEST_TARGETS=(
            "PipelineKitTests"
            "PipelineKitCoreTests"
            "PipelineKitResilienceTests"
            "PipelineKitSecurityTests"
            "PipelineKitCacheTests"
            "PipelineKitPoolingTests"
            "PipelineKitObservabilityTests"
            "PipelineKitPerformanceTests"
          )

          OVERALL_EXIT_CODE=0

          for target in "${TEST_TARGETS[@]}"; do
            echo ""
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "Running $target with coverage..."
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "Start time: $(date)"

            # Run with 10 minute timeout per target (gtimeout from brew install coreutils)
            if command -v gtimeout &> /dev/null; then
              gtimeout 600 swift test --filter "$target" --enable-code-coverage || TARGET_EXIT_CODE=$?
            else
              swift test --filter "$target" --enable-code-coverage || TARGET_EXIT_CODE=$?
            fi

            TARGET_EXIT_CODE=${TARGET_EXIT_CODE:-0}
            echo "End time: $(date) (exit code: $TARGET_EXIT_CODE)"

            if [ $TARGET_EXIT_CODE -eq 0 ]; then
              echo "✅ $target passed"
              # Preserve profdata
              if [ -f .build/debug/codecov/default.profdata ]; then
                cp .build/debug/codecov/default.profdata .build/debug/codecov/${target}.profdata
                echo "   Saved coverage data to ${target}.profdata"
              fi
            elif [ $TARGET_EXIT_CODE -eq 124 ]; then
              echo "::error::⏱️ $target TIMED OUT after 10 minutes"
              OVERALL_EXIT_CODE=1
            else
              echo "::warning::❌ $target failed with exit code $TARGET_EXIT_CODE"
              OVERALL_EXIT_CODE=1
            fi
          done

          set -e
          echo "Tests completed at $(date)"
          exit $OVERALL_EXIT_CODE

      - name: Build (Release)
        run: swift build -c release

      - name: Export coverage
        run: |
          set -euo pipefail

          # Find test binary and profdata
          BIN=$(find .build -name "*PackageTests.xctest" -type d | head -n1)/Contents/MacOS/$(basename $(find .build -name "*PackageTests.xctest" -type d | head -n1) .xctest)
          PROF=$(find .build -name default.profdata | head -n1)

          if [[ -f "$BIN" && -f "$PROF" ]]; then
            echo "Found test binary: $BIN"
            echo "Found profdata: $PROF"

            # Use llvm-cov from the Swift toolchain to match the profdata format
            LLVM_COV=$(xcrun --find llvm-cov 2>/dev/null || echo "llvm-cov")

            echo "Using llvm-cov: $LLVM_COV"
            $LLVM_COV --version || true

            # Export coverage with format matching
            $LLVM_COV export "$BIN" -instr-profile="$PROF" -format=lcov > coverage.lcov || {
              echo "::warning::Failed to export coverage - format mismatch or corrupt profdata"
              exit 0
            }

            echo "✅ Coverage exported successfully"
          else
            echo "::warning::Missing test binary or profdata file"
            echo "BIN exists: $(test -f "$BIN" && echo yes || echo no)"
            echo "PROF exists: $(test -f "$PROF" && echo yes || echo no)"
          fi

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-macos
          path: coverage.lcov
          if-no-files-found: ignore

  ios-sim:
    name: iOS • Simulator Tests
    runs-on: macos-15
    timeout-minutes: 25
    env:
      # Update this scheme if you use a custom one; SPM auto-schemes commonly use this name
      SCHEME: PipelineKit-Package
      DESTINATION: platform=iOS Simulator,name=iPhone 16,OS=latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Select Xcode 16
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.*'

      - name: Xcode version
        run: xcodebuild -version

      - name: Build for testing (Debug)
        run: |
          set -euo pipefail
          xcodebuild \
            -scheme "$SCHEME" \
            -destination "$DESTINATION" \
            -configuration Debug \
            -skipPackagePluginValidation \
            -skipMacroValidation \
            build-for-testing | xcpretty || exit ${PIPESTATUS[0]}

      - name: Run tests (Debug)
        run: |
          set -euo pipefail
          xcodebuild \
            -scheme "$SCHEME" \
            -destination "$DESTINATION" \
            -configuration Debug \
            -skipPackagePluginValidation \
            -skipMacroValidation \
            test | xcpretty || exit ${PIPESTATUS[0]}

  watchos-sim:
    name: watchOS • Simulator Build
    runs-on: macos-15
    timeout-minutes: 20
    continue-on-error: true  # keep advisory while we stabilize
    env:
      SCHEME: PipelineKit-Package
      DESTINATION: generic/platform=watchOS Simulator
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Select Xcode 16
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.*'

      - name: Xcode version
        run: xcodebuild -version

      - name: Build (Debug)
        run: |
          set -euo pipefail
          xcodebuild \
            -scheme "$SCHEME" \
            -destination "$DESTINATION" \
            -configuration Debug \
            -skipPackagePluginValidation \
            -skipMacroValidation \
            build | xcpretty || exit ${PIPESTATUS[0]}
