name: Coverage Dashboard

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  coverage:
    name: Generate Coverage Dashboard
    runs-on: macos-14
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Swift
        uses: swift-actions/setup-swift@v2.3.0
        with:
          swift-version: '6.0'
      
      - name: Install jemalloc
        run: brew install jemalloc
      
      - name: Cache Swift packages
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/.swiftpm
          key: ${{ runner.os }}-swift-${{ hashFiles('Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-swift-
      
      - name: Run Tests with Coverage
        run: |
          swift test --enable-code-coverage --parallel
      
      - name: Generate Coverage Reports
        run: |
          # Generate LCOV report
          PROFDATA=$(find .build -name 'default.profdata' | head -n 1)
          BINARY=$(find .build -name 'PipelineKitPackageTests.xctest' -type d | head -n 1)/Contents/MacOS/PipelineKitPackageTests
          
          xcrun llvm-cov export \
            "$BINARY" \
            -instr-profile="$PROFDATA" \
            -format=lcov \
            -ignore-filename-regex=".build|Tests" \
            > coverage.lcov
          
          # Generate JSON for parsing
          xcrun llvm-cov export \
            "$BINARY" \
            -instr-profile="$PROFDATA" \
            -format=json \
            -ignore-filename-regex=".build|Tests" \
            > coverage.json
          
          # Generate HTML report
          xcrun llvm-cov show \
            "$BINARY" \
            -instr-profile="$PROFDATA" \
            -format=html \
            -output-dir=coverage-html \
            -ignore-filename-regex=".build|Tests"
      
      - name: Extract Coverage Metrics
        id: coverage
        run: |
          # Extract total coverage
          TOTAL=$(xcrun llvm-cov report \
            $(find .build -name 'PipelineKitPackageTests.xctest' -type d | head -n 1)/Contents/MacOS/PipelineKitPackageTests \
            -instr-profile=$(find .build -name 'default.profdata' | head -n 1) \
            -ignore-filename-regex=".build|Tests" | \
            tail -1 | awk '{print $4}' | sed 's/%//')
          
          echo "total=$TOTAL" >> $GITHUB_OUTPUT
          echo "üìä Total Coverage: $TOTAL%"
          
          # Generate badge color
          if (( $(echo "$TOTAL >= 80" | bc -l) )); then
            COLOR="green"
          elif (( $(echo "$TOTAL >= 60" | bc -l) )); then
            COLOR="yellow"
          else
            COLOR="red"
          fi
          echo "color=$COLOR" >> $GITHUB_OUTPUT
      
      - name: Create Coverage Badge
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: your-gist-id-here
          filename: pipelinekit-coverage.json
          label: Coverage
          message: ${{ steps.coverage.outputs.total }}%
          color: ${{ steps.coverage.outputs.color }}
        continue-on-error: true
      
      - name: Generate Dashboard HTML
        run: |
          cat > coverage-dashboard.html << EOF
          <!DOCTYPE html>
          <html>
          <head>
              <title>PipelineKit Coverage - ${{ steps.coverage.outputs.total }}%</title>
              <meta charset="UTF-8">
              <style>
                  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; }
                  .container { max-width: 1200px; margin: 0 auto; padding: 2rem; }
                  .header { text-align: center; margin-bottom: 3rem; }
                  .metric { display: inline-block; margin: 1rem; padding: 1rem; background: #f5f5f5; border-radius: 8px; }
                  .metric-value { font-size: 2rem; font-weight: bold; color: #333; }
                  .metric-label { color: #666; margin-top: 0.5rem; }
                  .coverage-bar { height: 30px; background: #e0e0e0; border-radius: 15px; overflow: hidden; }
                  .coverage-fill { height: 100%; background: linear-gradient(90deg, #4CAF50, #8BC34A); }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>üìä PipelineKit Test Coverage</h1>
                      <p>Generated on $(date -u +"%Y-%m-%d %H:%M:%S UTC")</p>
                  </div>
                  
                  <div style="text-align: center;">
                      <div class="metric">
                          <div class="metric-value">${{ steps.coverage.outputs.total }}%</div>
                          <div class="metric-label">Total Coverage</div>
                      </div>
                      
                      <div class="metric">
                          <div class="metric-value">472</div>
                          <div class="metric-label">Total Tests</div>
                      </div>
                      
                      <div class="metric">
                          <div class="metric-value">7</div>
                          <div class="metric-label">Modules</div>
                      </div>
                  </div>
                  
                  <div style="margin: 3rem 0;">
                      <h2>Coverage Progress</h2>
                      <div class="coverage-bar">
                          <div class="coverage-fill" style="width: ${{ steps.coverage.outputs.total }}%"></div>
                      </div>
                      <p style="text-align: center; margin-top: 1rem;">Target: 80% | Current: ${{ steps.coverage.outputs.total }}%</p>
                  </div>
                  
                  <div style="text-align: center; margin-top: 3rem;">
                      <a href="coverage-html/index.html" style="display: inline-block; padding: 1rem 2rem; background: #4CAF50; color: white; text-decoration: none; border-radius: 5px;">View Detailed Report</a>
                  </div>
              </div>
          </body>
          </html>
          EOF
      
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.lcov
          flags: unittests
          name: pipelinekit
          fail_ci_if_error: false
      
      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.lcov
            coverage.json
            coverage-dashboard.html
            coverage-html/
      
      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./coverage-html
          destination_dir: coverage
        continue-on-error: true
      
      - name: Comment PR with Coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const coverage = '${{ steps.coverage.outputs.total }}';
            const color = '${{ steps.coverage.outputs.color }}';
            const emoji = coverage >= 80 ? '‚úÖ' : coverage >= 60 ? '‚ö†Ô∏è' : '‚ùå';
            
            const comment = `## ${emoji} Test Coverage Report
            
            **Total Coverage:** ${coverage}%
            
            | Metric | Value |
            |--------|-------|
            | Coverage | ${coverage}% |
            | Tests | 472 |
            | Modules | 7 |
            | Threshold | 80% |
            
            [View Full Report](https://your-org.github.io/PipelineKit/coverage/)
            
            ---
            *Coverage report generated at ${new Date().toISOString()}*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
        continue-on-error: true
