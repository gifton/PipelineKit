name: Weekly Full CI

on:
  schedule:
    - cron: '0 3 * * 0'  # Run at 3 AM UTC every Sunday
  workflow_dispatch:
    inputs:
      skip_paths_filter:
        description: 'Run full CI regardless of changed files'
        type: boolean
        default: true

env:
  SWIFT_VERSION: '6.0'
  # Full CI always enforces quality gates
  ENFORCE_SWIFTLINT: 'true'
  ENFORCE_COVERAGE: 'true'
  ENFORCE_PERFORMANCE: 'true'
  MINIMUM_COVERAGE: 70

permissions:
  contents: read
  checks: write
  pull-requests: write
  security-events: write

jobs:
  # Run ALL tests regardless of what changed
  full-test-matrix:
    name: Full Test Matrix (${{ matrix.os }} / Swift ${{ matrix.swift }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        os: [macos-14, macos-13, ubuntu-latest]
        swift: ['5.9', '6.0']
        exclude:
          # Ubuntu doesn't support Swift 5.9 well
          - os: ubuntu-latest
            swift: '5.9'
        include:
          - os: ubuntu-latest
            swift: '6.0'
            container: swift:6.0
          - os: ubuntu-latest
            swift: '5.10'
            container: swift:5.10
    
    container: ${{ matrix.container }}
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Setup Swift
      if: runner.os != 'Linux'
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: ${{ matrix.swift }}
    
    - name: Setup SPM Cache
      uses: ./.github/actions/setup-spm-cache
      with:
        cache-key-prefix: 'weekly'
        swift-version: ${{ matrix.swift }}
    
    - name: Build All Targets
      run: |
        swift build --build-tests
        swift build --configuration release
    
    - name: Run All Tests
      run: |
        # Run all test targets
        swift test --enable-code-coverage
    
    - name: Run Performance Tests
      if: runner.os == 'macOS'
      run: |
        swift test --configuration release --filter "PipelineKitPerformanceTests"

  # Deep security scan
  security-audit:
    name: Deep Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Run Trivy Deep Scan
      uses: aquasecurity/trivy-action@0.28.0
      with:
        scan-type: 'fs'
        scan-ref: '.'
        severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Security Results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Dependency Audit
      run: |
        # Check for outdated dependencies
        swift package show-dependencies --format json > dependencies.json
        echo "📦 Dependency tree generated"

  # Comprehensive benchmarking
  benchmark-suite:
    name: Full Benchmark Suite
    runs-on: macos-14
    timeout-minutes: 90
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: ${{ env.SWIFT_VERSION }}
    
    - name: Setup SPM Cache
      uses: ./.github/actions/setup-spm-cache
      with:
        cache-key-prefix: 'benchmark-full'
        swift-version: ${{ env.SWIFT_VERSION }}
    
    - name: Run Extended Benchmarks
      run: |
        # Build all test targets in release mode
        swift build --configuration release --build-tests
        
        # Run performance tests multiple times for consistency
        for i in {1..3}; do
          echo "🔄 Benchmark iteration $i/3"
          swift test --configuration release --filter "PerformanceTests"
        done
    
    - name: Memory Profiling
      run: |
        # Run with memory sanitizer
        swift test --sanitize=address || echo "Address sanitizer completed"
        
        # Run with thread sanitizer
        swift test --sanitize=thread || echo "Thread sanitizer completed"

  # Documentation completeness check
  documentation-audit:
    name: Documentation Audit
    runs-on: macos-14
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: ${{ env.SWIFT_VERSION }}
    
    - name: Check Documentation Coverage
      run: |
        # Generate documentation with warnings
        swift package generate-documentation \
          --target PipelineKit \
          --output-path ./docs \
          --disable-indexing \
          --transform-for-static-hosting \
          --analyze \
          --level detailed
    
    - name: Upload Documentation Report
      uses: actions/upload-artifact@v4
      with:
        name: documentation-audit
        path: docs/
        retention-days: 7

  # Compatibility testing
  compatibility-check:
    name: Compatibility Check
    runs-on: macos-14
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Test Package Resolution
      run: |
        # Test as dependency
        mkdir test-integration
        cd test-integration
        
        swift package init --type executable
        
        # Add PipelineKit as dependency
        cat > Package.swift << EOF
        // swift-tools-version:5.9
        import PackageDescription
        
        let package = Package(
            name: "TestIntegration",
            platforms: [.macOS(.v13)],
            dependencies: [
                .package(path: "..")
            ],
            targets: [
                .executableTarget(
                    name: "TestIntegration",
                    dependencies: ["PipelineKit"])
            ]
        )
        EOF
        
        swift build

  # Weekly report
  weekly-report:
    name: Generate Weekly Report
    runs-on: ubuntu-latest
    needs: [full-test-matrix, security-audit, benchmark-suite, documentation-audit, compatibility-check]
    if: always()
    timeout-minutes: 10
    
    steps:
    - name: Generate Report
      run: |
        echo "# Weekly Full CI Report"
        echo "Date: $(date)"
        echo ""
        echo "## Test Results:"
        echo "- Full Test Matrix: ${{ needs.full-test-matrix.result }}"
        echo "- Security Audit: ${{ needs.security-audit.result }}"
        echo "- Benchmark Suite: ${{ needs.benchmark-suite.result }}"
        echo "- Documentation Audit: ${{ needs.documentation-audit.result }}"
        echo "- Compatibility Check: ${{ needs.compatibility-check.result }}"
        echo ""
        
        # Determine overall status
        if [ "${{ needs.full-test-matrix.result }}" = "success" ] && \
           [ "${{ needs.security-audit.result }}" = "success" ] && \
           [ "${{ needs.benchmark-suite.result }}" = "success" ]; then
          echo "## Overall Status: ✅ PASSED"
        else
          echo "## Overall Status: ❌ FAILED"
          echo ""
          echo "### Action Required:"
          echo "Please review failing jobs and address issues before next release."
        fi
    
    - name: Create Issue for Failures
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const date = new Date().toISOString().split('T')[0];
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Weekly CI Failed - ${date}`,
            body: `The weekly full CI run has failed. Please review the [workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.`,
            labels: ['ci', 'weekly-audit']
          });