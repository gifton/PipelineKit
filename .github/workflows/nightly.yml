name: Nightly Build

on:
  schedule:
    - cron: '0 2 * * *'  # Run at 2 AM UTC daily
  workflow_dispatch:

env:
  SWIFT_VERSION: '6.1'

permissions:
  contents: read
  checks: write

concurrency:
  group: nightly-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel nightly builds

jobs:
  nightly-test:
    name: Nightly Test Suite (${{ matrix.os }})
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macOS-14
            runner: macos-14
          - os: macOS-13
            runner: macos-13
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Setup Swift
        uses: swift-actions/setup-swift@v2
        with:
          swift-version: ${{ env.SWIFT_VERSION }}
      
      - name: Cache SPM
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/.swiftpm
          key: ${{ runner.os }}-spm-${{ hashFiles('Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-
      
      - name: Full Test Suite
        run: |
          swift test --enable-code-coverage
      
      - name: Stress Tests
        run: |
          # Run tests multiple times to catch flaky tests
          for i in {1..5}; do
            echo "ðŸ”„ Test iteration $i/5"
            swift test --configuration release
          done
        timeout-minutes: 30

  compatibility-test:
    name: Swift Compatibility
    runs-on: macos-14
    timeout-minutes: 30
    strategy:
      matrix:
        swift-version: ['5.9', '6.1']
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Setup Swift ${{ matrix.swift-version }}
        uses: swift-actions/setup-swift@v2
        with:
          swift-version: ${{ matrix.swift-version }}
      
      - name: Cache SPM
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/.swiftpm
          key: ${{ runner.os }}-swift-${{ matrix.swift-version }}-${{ hashFiles('Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-swift-${{ matrix.swift-version }}-
      
      - name: Build
        run: swift build
      
      - name: Test
        run: swift test

  linux-test:
    name: Linux Test
    runs-on: ubuntu-latest
    container: swift:${{ matrix.swift-version }}
    timeout-minutes: 30
    strategy:
      matrix:
        swift-version: ['6.1', '5.10']
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Cache SPM
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/.swiftpm
          key: linux-swift-${{ matrix.swift-version }}-${{ hashFiles('Package.resolved') }}
          restore-keys: |
            linux-swift-${{ matrix.swift-version }}-
      
      - name: Build
        run: swift build
      
      - name: Test
        run: swift test

  memory-test:
    name: Memory & Leak Tests
    runs-on: macos-14
    timeout-minutes: 30
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Setup Swift
        uses: swift-actions/setup-swift@v2
        with:
          swift-version: ${{ env.SWIFT_VERSION }}
      
      - name: Cache SPM
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/.swiftpm
          key: ${{ runner.os }}-spm-${{ hashFiles('Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-
      
      - name: Build with Address Sanitizer
        run: swift build --sanitize=address
      
      - name: Run Tests with Address Sanitizer
        run: swift test --sanitize=address
        continue-on-error: true  # Don't fail for now
      
      - name: Build with Thread Sanitizer
        run: swift build --sanitize=thread
      
      - name: Run Tests with Thread Sanitizer
        run: swift test --sanitize=thread
        continue-on-error: true  # Don't fail for now

  extended-benchmarks:
    name: Extended Benchmarks
    runs-on: macos-14
    timeout-minutes: 60
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Setup Swift
        uses: swift-actions/setup-swift@v2
        with:
          swift-version: ${{ env.SWIFT_VERSION }}
      
      - name: Cache SPM
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/.swiftpm
          key: ${{ runner.os }}-spm-${{ hashFiles('Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-
      
      - name: Build Performance Tests
        run: swift build --configuration release --target PipelineKitPerformanceTests
      
      - name: Run Extended Performance Tests
        run: |
          # Run full performance test suite
          swift test --configuration release --filter "PipelineKitPerformanceTests" || {
            EXIT_CODE=$?
            echo "Performance tests completed with status: $EXIT_CODE"
          }
      
      - name: Upload Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nightly-benchmark-results
          path: |
            benchmark-results/
            .benchmarkBaselines/
          if-no-files-found: ignore
          retention-days: 30

  report:
    name: Nightly Report
    runs-on: ubuntu-latest
    needs: [nightly-test, compatibility-test, linux-test, memory-test, extended-benchmarks]
    if: always()
    
    steps:
      - name: Generate Report
        run: |
          echo "# Nightly Build Report"
          echo "Date: $(date)"
          echo ""
          echo "## Results:"
          echo "- Nightly Tests: ${{ needs.nightly-test.result }}"
          echo "- Compatibility: ${{ needs.compatibility-test.result }}"
          echo "- Linux: ${{ needs.linux-test.result }}"
          echo "- Memory Tests: ${{ needs.memory-test.result }}"
          echo "- Benchmarks: ${{ needs.extended-benchmarks.result }}"
