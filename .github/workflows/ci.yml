name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  SWIFT_VERSION: '5.10'

jobs:
  lint:
    name: SwiftLint
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install SwiftLint
      run: brew install swiftlint
    
    - name: Run SwiftLint
      run: swiftlint lint --config .swiftlint.yml

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-14, macos-13]
        swift: ['5.10']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Swift
      if: matrix.os != 'ubuntu-22.04'
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: ${{ matrix.swift }}
    
    - name: Setup Swift on Ubuntu
      if: matrix.os == 'ubuntu-22.04'
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: ${{ matrix.swift }}
    
    - name: Get swift version
      run: swift --version
      
    - name: Build
      run: swift build -v

  unit-tests:
    name: Unit Tests
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-14, macos-13]
        swift: ['5.10']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Swift
      if: matrix.os != 'ubuntu-22.04'
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: ${{ matrix.swift }}
    
    - name: Setup Swift on Ubuntu
      if: matrix.os == 'ubuntu-22.04'
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: ${{ matrix.swift }}
      
    - name: Run unit tests
      run: swift package test-unit --enable-code-coverage
      
    - name: Generate coverage report
      if: matrix.os == 'ubuntu-22.04' && matrix.swift == '5.10'
      run: |
        swift test --filter PipelineKitTests --enable-code-coverage
        # Find the test executable (it's in a different location on Linux)
        TEST_BINARY=$(find .build/debug -name "PipelineKitPackageTests.xctest" -type f 2>/dev/null || find .build/debug -name "*PackageTests" -type f | head -n 1)
        if [ -n "$TEST_BINARY" ]; then
          llvm-cov export -format="lcov" "$TEST_BINARY" -instr-profile .build/debug/codecov/default.profdata > coverage.lcov
        else
          echo "Warning: Could not find test binary for coverage"
        fi
      
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-22.04' && matrix.swift == '5.10'
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.lcov
        fail_ci_if_error: false

  stress-tests:
    name: Stress Tests
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-14]  # Run stress tests on fewer platforms
        swift: ['5.10']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: ${{ matrix.swift }}
      
    - name: Run stress tests
      run: swift package test-stress
      timeout-minutes: 30  # Stress tests may take longer

  integration-tests:
    name: Integration Tests
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-14]  # Run on key platforms
        swift: ['5.10']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Swift
      if: matrix.os != 'ubuntu-22.04'
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: ${{ matrix.swift }}
    
    - name: Setup Swift on Ubuntu
      if: matrix.os == 'ubuntu-22.04'
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: ${{ matrix.swift }}
      
    - name: Run integration tests
      run: swift package test-integration
      timeout-minutes: 20

  test-examples:
    name: Test Examples
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: ${{ env.SWIFT_VERSION }}
    
    - name: Build examples
      run: |
        cd Examples
        swift build -v
        
    - name: Run basic example
      run: |
        cd Examples
        swift run BasicExample
        
    - name: Run advanced example
      run: |
        cd Examples
        swift run AdvancedExample

  linux-compatibility:
    name: Linux Compatibility
    runs-on: ubuntu-22.04
    container:
      image: swift:5.10-jammy
    steps:
    - uses: actions/checkout@v4
    
    - name: Build
      run: swift build -v
      
    - name: Test
      run: swift test -v

  benchmarks:
    name: Performance Benchmarks
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: ${{ env.SWIFT_VERSION }}
    
    - name: Run benchmarks
      run: swift package benchmark --quick
      
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark-results/

  documentation:
    name: Documentation
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: ${{ env.SWIFT_VERSION }}
        
    - name: Build documentation
      run: |
        swift package --allow-writing-to-directory ./docs \
          generate-documentation --target PipelineKit \
          --output-path ./docs